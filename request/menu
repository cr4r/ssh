#!/bin/bash
red=$(tput setaf 1)
gren=$(tput setaf 2)
yellow=$(tput setaf 3)
SCPdir="/etc/cr4r" && [[ ! -d ${SCPdir} ]] && exit 1
SCPusr="${SCPdir}/user" && [[ ! -d ${SCPusr} ]] && mkdir ${SCPusr}
SCPfrm="/etc/ger-frm" && [[ ! -d ${SCPfrm} ]] && mkdir ${SCPfrm}
SCPinst="/etc/inst" && [[ ! -d ${SCPfrm} ]] && mkdir ${SCPfrm}
SCPbahasa="${SCPdir}/bahasa"

echo "id" >/etc/cr4r/bahasa #BAHASA indonesia
_total=$(awk -F : '$3 >= 500 {print  $1}' /etc/passwd | grep -v "nobody" | sort | wc -l)
[[ -e /etc/cr4r/ger-user/Limiter.log ]] && log=$(echo -e "\033[1;32m[LOG] ") || log=$(echo -e "\033[1;31m[NO LOG] ")
if [[ -e /etc/bash.bashrc-bakup ]]; then
  AutoRun="\033[1;32m[on]"
elif [[ -e /etc/bash.bashrc ]]; then
  AutoRun="\033[1;31m[off]"
fi
# Funcoes Update - beta
P_SERVER="https://raw.githubusercontent.com/cr4r/ssh/main/Install/"
v1=$(curl -sSL "${P_SERVER}/versi")
v2=$(cat /bin/versi_script)
txt01="TOOLS ANDA VERSI TERBARU!"
txt02="ANDA MEMILIKI PEMBARUAN!"
[[ $v1 = $v2 ]] && vesaoSCT="\033[1;32m${txt01}        \033[1;31m[\033[1;37m $v2 \033[1;31m]" || vesaoSCT="\033[1;31m${txt02}"

msg() {
  local colors="/etc/new-cr4r-color"
  if [[ ! -e $colors ]]; then
    COLOR[0]='\033[1;37m' #BRAN='\033[1;37m'
    COLOR[1]='\e[31m'     #VERMELHO='\e[31m'
    COLOR[2]='\e[32m'     #VERDE='\e[32m'
    COLOR[3]='\e[33m'     #AMARELO='\e[33m'
    COLOR[4]='\e[34m'     #AZUL='\e[34m'
    COLOR[5]='\e[35m'     #MAGENTA='\e[35m'
    COLOR[6]='\033[1;36m' #MAG='\033[1;36m'
  else
    local COL=0
    for number in $(cat $colors); do
      case $number in
      1) COLOR[$COL]='\033[1;37m' ;;
      2) COLOR[$COL]='\e[31m' ;;
      3) COLOR[$COL]='\e[32m' ;;
      4) COLOR[$COL]='\e[33m' ;;
      5) COLOR[$COL]='\e[34m' ;;
      6) COLOR[$COL]='\e[35m' ;;
      7) COLOR[$COL]='\033[1;36m' ;;
      esac
      let COL++
    done
  fi
  NEGRITO='\e[1m'
  SEMCOR='\e[0m'
  case $1 in
  -ne) cor="${COLOR[1]}${NEGRITO}" && echo -ne "${cor}${2}${SEMCOR}" ;;
  -ama) cor="${COLOR[3]}${NEGRITO}" && echo -e "${cor}${2}${SEMCOR}" ;;
  -verm) cor="${COLOR[3]}${NEGRITO}[!] ${COLOR[1]}" && echo -e "${cor}${2}${SEMCOR}" ;;
  -verm2) cor="${COLOR[1]}${NEGRITO}" && echo -e "${cor}${2}${SEMCOR}" ;;
  -azu) cor="${COLOR[6]}${NEGRITO}" && echo -e "${cor}${2}${SEMCOR}" ;;
  -verd) cor="${COLOR[2]}${NEGRITO}" && echo -e "${cor}${2}${SEMCOR}" ;;
  -bra) cor="${COLOR[0]}${NEGRITO}" && echo -e "${cor}${2}${SEMCOR}" ;;
  "-bar2" | "-bar") cor="${COLOR[4]}——————————————————————————————————————————————————————" && echo -e "${SEMCOR}${cor}${SEMCOR}" ;;
  esac
}

canbio_color() {
  clear
  clear
  msg -bar2
  msg -ama "$(fun_trans "Hai, ini Manajer Warna") \033[1;31m[CODERS-FAMILY]"
  msg -bar2
  msg -ama "$(fun_trans "Ada 7 pilihan warna"): "
  echo -e '\033[1;37m [1] #DEDAK\033[0m'
  echo -e '\e[31m [2] #MERAH\033[0m'
  echo -e '\e[32m [3] #HIJAU\033[0m'
  echo -e '\e[33m [4] #KUNING\033[0m'
  echo -e '\e[34m [5] #BIRU\033[0m'
  echo -e '\e[35m [6] #MAGENTA\033[0m'
  echo -e '\033[1;36m [7] #MAG\033[0m'
  msg -bar2
  for number in $(echo {1..7}); do
    msg -ne "$(fun_trans "Masukkan Warna") [$number]: " && read corselect
    [[ $corselect != @([1-7]) ]] && corselect=1
    cores+="$corselect "
    corselect=0
  done
  echo "$cores" >/etc/new-adm-color
  msg -bar2
}
fun_trans() {
  local texto
  local retorno
  declare -A texto
  SCPbahasa="${SCPdir}/bahasa"
  [[ ! -e ${SCPbahasa} ]] && touch ${SCPbahasa}
  local LINGUAGE=$(cat ${SCPbahasa})
  [[ -z $LINGUAGE ]] && LINGUAGE=id
  [[ $LINGUAGE == "id" ]] && echo "$@" && return
  [[ ! -e /etc/texto-cr4r ]] && touch /etc/texto-cr4r
  source /etc/texto-cr4r
  if [[ -z "$(echo ${texto[$@]})" ]]; then
    if [[ $(echo "$@" | grep -o '*') = "*" ]]; then
      # retorno="$(source trans -e google -b pt:${LINGUAGE} "$@" | sed -e 's/[^a-z0-9 -]//ig' | awk '{print toupper($0)}' 2>/dev/null)"
      retorno="$(source trans -e google -b pt:${LINGUAGE} "$@" | sed -e 's/[^a-z0-9-]//ig' | awk '{print toupper($0)}' 2>/dev/null)"
    else
      retorno="$(source trans -e google -b pt:${LINGUAGE} "$@" | sed -e 's/[^a-z0-9 -]//ig' 2>/dev/null)"
    fi
    if [[ $retorno != "" ]]; then
      echo "texto[$@]='$retorno'" >>/etc/texto-cr4r
      echo "$retorno"
    else
      echo "$@"
    fi
  else
    echo "${texto[$@]}"
  fi
}
atualiza_fun() {
  cd $HOME
  tput cuu1 && tput dl1
  msg -bar2
  msg -ama "$(fun_trans "PEMBARUAN SKRIP ADM*"): \033[1;31m[CODERS-FAMILY]"
  msg -verm "$(fun_trans "Saat kami melanjutkan, data seperti waktu penggunaan akan hilang"): "
  msg -bar2
  while [[ $Key != @(s|S|y|Y|n|N) ]]; do
    msg -ne "$(fun_trans "setuju")? [S/N]: " && read Key
    tput cuu1 && tput dl1
  done
  if [[ $Key = @(s|S|y|Y) ]]; then
    msg -verm "$(fun_trans "Memulai update"): "
    [[ -e $HOME/instalar.sh ]] && rm $HOME/instalar.sh*
    [[ -e $HOME/lista-req ]] && rm $HOME/lista-req*
    [[ -e $HOME/versi ]] && rm $HOME/versi*
    wget -O $HOME/instalar.sh https://raw.githubusercontent.com/cr4r/ssh/main/install.sh &>/dev/null
    chmod +x $HOME/instalar.s*
    local LINGUAGE=$(cat ${SCPbahasa})
    [[ -d ${SCPdir} ]] && rm -rf ${SCPdir}
    [[ -d ${SCPinst} ]] && rm -rf ${SCPinst}
    [[ -d ${SCPfrm} ]] && rm -rf ${SCPfrm}
    $HOME/instalar.sh "${LINGUAGE}"
  else
    msg -verm "$(fun_trans "Dibatalkan"): "
    msg -bar2
  fi
  [[ -e $HOME/instalar.sh ]] && rm $HOME/instalar.sh*
}
funcao_bahasa() {
  tput cuu1 && tput dl1
  clear
  clear
  msg -bar2
  echo -e "\033[1;32m$(fun_trans "PERINGATAN"): "
  echo -e "\033[1;31m$(fun_trans "FUNGSI TIDAK TERSEDIA.")"
  echo "id" >/etc/cr4r/bahasa
  msg -bar2
}
funcao_bahasa_1() {
  tput cuu1 && tput dl1
  clear
  clear
  msg -bar2
  declare -A bahasa=([1]="id Indonesia" [2]="en English" [3]="fr Franch" [4]="de German" [5]="it Italian" [6]="pl Polish" [7]="pt Portuguese" [8]="es Spanish" [9]="tr Turkish")
  for ((i = 1; i <= 12; i++)); do
    valor1="$(echo ${bahasa[$i]} | cut -d' ' -f2)"
    [[ -z $valor1 ]] && break
    valor1="\033[1;32m[$i] > \033[1;33m$valor1"
    while [[ ${#valor1} -lt 37 ]]; do
      valor1=$valor1" "
    done
    echo -ne "$valor1"
    let i++
    valor2="$(echo ${bahasa[$i]} | cut -d' ' -f2)"
    [[ -z $valor2 ]] && {
      echo -e " "
      break
    }
    valor2="\033[1;32m[$i] > \033[1;33m$valor2"
    while [[ ${#valor2} -lt 37 ]]; do
      valor2=$valor2" "
    done
    echo -ne "$valor2"
    let i++
    valor3="$(echo ${bahasa[$i]} | cut -d' ' -f2)"
    [[ -z $valor3 ]] && {
      echo -e " "
      break
    }
    valor3="\033[1;32m[$i] > \033[1;33m$valor3"
    while [[ ${#valor3} -lt 37 ]]; do
      valor3=$valor3" "
    done
    echo -e "$valor3"
  done
  msg -bar2
  unset selection
  while [[ ${selection} != @([1-8]) ]]; do
    echo -ne "\033[1;37m$(fun_trans "Pilih opsi"): " && read selection
    tput cuu1 && tput dl1
  done
  [[ -e /etc/texto-cr4r ]] && rm /etc/texto-cr4r
  echo "$(echo ${bahasa[$selection]} | cut -d' ' -f1)" >${SCPbahasa}
}
mine_port() {
  local portVAR=$(lsof -V -i tcp -P -n | grep -v "ESTABLISHED" | grep -v "COMMAND" | grep "LISTEN")
  local NOREPEAT
  local reQ
  local Port
  while read port; do
    reQ=$(echo ${port} | awk '{print $1}')
    Port=$(echo {$port} | awk '{print $9}' | awk -F ":" '{print $2}')
    [[ $(echo -e $NOREPEAT | grep -w "$Port") ]] && continue
    NOREPEAT+="$Port\n"
    case ${reQ} in
    v2-ui)
      [[ -z $V2R ]] && local V2R="\033[1;31mV2RAY: \033[1;32m"
      V2R+="$Port "
      ;;
    squid | squid3)
      [[ -z $SQD ]] && local SQD="\033[1;31mSQUID: \033[1;32m"
      SQD+="$Port "
      ;;
    apache | apache2)
      [[ -z $APC ]] && local APC="\033[1;31mAPACHE: \033[1;32m"
      APC+="$Port "
      ;;
    ssh | sshd)
      [[ -z $SSH ]] && local SSH="\033[1;31mSSH: \033[1;32m"
      SSH+="$Port "
      ;;
    dropbear)
      [[ -z $DPB ]] && local DPB="\033[1;31mDROPBEAR: \033[1;32m"
      DPB+="$Port "
      ;;
    ssserver)
      [[ -z $SSV ]] && local SSV="\033[1;31mSHADOWSOCKS: \033[1;32m"
      SSV+="$Port "
      ;;
    openvpn)
      [[ -z $OVPN ]] && local OVPN="\033[1;31mOPENVPN: \033[1;32m"
      OVPN+="$Port "
      ;;
    stunnel4 | stunnel)
      [[ -z $SSL ]] && local SSL="\033[1;31mSSL: \033[1;32m"
      SSL+="$Port "
      ;;
    sslh)
      [[ -z $SSLH ]] && local SSLH="\033[1;31mSSLH: \033[1;32m"
      SSLH+="$Port "
      ;;
    python | python3)
      [[ -z $PY3 ]] && local PY3="\033[1;31mSOCKS: \033[1;32m"
      PY3+="$Port "
      ;;
    esac
  done <<<"${portVAR}"
  #UDP
  local portVAR=$(lsof -V -i -P -n | grep -v "ESTABLISHED" | grep -v "COMMAND")
  local NOREPEAT
  local reQ
  local Port
  while read port; do
    reQ=$(echo ${port} | awk '{print $1}')
    Port=$(echo ${port} | awk '{print $9}' | awk -F ":" '{print $2}')
    [[ $(echo -e $NOREPEAT | grep -w "$Port") ]] && continue
    NOREPEAT+="$Port\n"
    case ${reQ} in
    openvpn)
      [[ -z $OVPN ]] && local OVPN="\033[0;36mOPENVPN: \033[1;32m"
      OVPN+="$Port "
      ;;
    esac
  done <<<"${portVAR}"
  [[ ! -z $V2R ]] && echo -e $V2R
  [[ ! -z $SQD ]] && echo -e $SQD
  [[ ! -z $APC ]] && echo -e $APC
  [[ ! -z $SSH ]] && echo -e $SSH
  [[ ! -z $DPB ]] && echo -e $DPB
  [[ ! -z $OVPN ]] && echo -e $OVPN
  [[ ! -z $PY3 ]] && echo -e $PY3
  [[ ! -z $SSL ]] && echo -e $SSL
  [[ ! -z $SSV ]] && echo -e $SSV
  [[ ! -z $SSLH ]] && echo -e $SSLH
}
mine_port2() {
  unset portas
  port_var=$(lsof -V -i tcp -P -n | grep -v "ESTABLISHED" | grep -v "COMMAND" | grep "LISTEN")
  i=0
  while read port; do
    var1=$(echo $port | awk '{print $1}') && var2=$(echo $port | awk '{print $9}' | awk -F ":" '{print $2}')
    [[ "$(echo -e ${port[@]} | grep "$var1 $var2")" ]] || {
      portas[$i]="$var1 $var2"
      let i++
    }
  done <<<"$port_var"
  for ((i = 0; i <= ${#portas[@]}; i++)); do
    servico="$(echo ${portas[$i]} | cut -d' ' -f1)"
    porta="$(echo ${portas[$i]} | cut -d' ' -f2)"
    [[ -z $servico ]] && break
    texto="\033[1;31m ${servico}: \033[1;32m${porta}"
    while [[ ${#texto} -lt 35 ]]; do
      texto=$texto" "
    done
    echo -ne "${texto}"
    let i++
    servico="$(echo ${portas[$i]} | cut -d' ' -f1)"
    porta="$(echo ${portas[$i]} | cut -d' ' -f2)"
    [[ -z $servico ]] && {
      echo -e " "
      break
    }
    texto="\033[1;31m ${servico}: \033[1;32m${porta}"
    while [[ ${#texto} -lt 35 ]]; do
      texto=$texto" "
    done
    echo -ne "${texto}"
    let i++
    servico="$(echo ${portas[$i]} | cut -d' ' -f1)"
    porta="$(echo ${portas[$i]} | cut -d' ' -f2)"
    [[ -z $servico ]] && {
      echo -e " "
      break
    }
    texto="\033[1;31m ${servico}: \033[1;32m${porta}"
    while [[ ${#texto} -lt 35 ]]; do
      texto=$texto" "
    done
    echo -e "${texto}"
  done
}
mine_port3() {
  PT=$(lsof -V -i tcp -P -n | grep -v "ESTABLISHED" | grep -v "COMMAND" | grep "LISTEN")
  for porta in $(echo -e "$PT" | cut -d: -f2 | cut -d' ' -f1 | uniq); do
    svcs=$(echo -e "$PT" | grep -w "$porta" | awk '{print $1}' | uniq)
    echo -e "\033[1;32m Servico \033[1;31m$svcs \033[1;32mPorta \033[1;37m$porta"
  done
}
mine_port4() {
  PT=$(lsof -V -i tcp -P -n | grep -v "ESTABLISHED" | grep -v "COMMAND" | grep "LISTEN")
  for porta in $(echo -e "$PT" | cut -d: -f2 | cut -d' ' -f1 | uniq); do
    svcs=$(echo -e "$PT" | grep -w "$porta" | awk '{print $1}' | uniq)
    echo -e "\033[1;31m$svcs: \033[1;37m$porta"
  done
}

mportas() {
  unset portas
  portas_var=$(lsof -V -i tcp -P -n | grep -v "ESTABLISHED" | grep -v "COMMAND" | grep "LISTEN")
  while read port; do
    var1=$(echo $port | awk '{print $1}') && var2=$(echo $port | awk '{print $9}' | awk -F ":" '{print $2}')
    [[ "$(echo -e $portas | grep "$var1 $var2")" ]] || portas+="$var1 $var2\n"
  done <<<"$portas_var"
  i=1
  echo -e "$portas"
}

ofus() {
  unset txtofus
  number=$(expr length $1)
  for ((i = 1; i < $number + 1; i++)); do
    txt[$i]=$(echo "$1" | cut -b $i)
    case ${txt[$i]} in
    ".") txt[$i]="+" ;;
    "+") txt[$i]="." ;;
    "1") txt[$i]="@" ;;
    "@") txt[$i]="1" ;;
    "2") txt[$i]="?" ;;
    "?") txt[$i]="2" ;;
    "3") txt[$i]="%" ;;
    "%") txt[$i]="3" ;;
    "/") txt[$i]="K" ;;
    "K") txt[$i]="/" ;;
    esac
    txtofus+="${txt[$i]}"
  done
  echo "$txtofus" | rev
}
remove_ferramenta() {
  clear
  clear
  msg -bar2
  echo -e "\033[1;31m$(fun_trans "PERINGATAN"): "
  echo -e "\033[1;33m$(fun_trans "Proses ini tidak dapat dibatalkan")"
  echo -e "\033[1;33m$(fun_trans "Pilih Alat yang Ingin Anda Hapus")"
  msg -bar2
  Numb=0
  for arqs in $(ls ${SCPfrm}); do
    float_data "$arqs" "$Numb" && {
      script[$Numb]="$arqs"
      let Numb++
    }
  done
  echo -ne "$(msg -verd "[0]") $(msg -verm2 ">") " && msg -bra "$(fun_trans "Kembali")"
  script[0]="voltar"
  msg -bar2
  selection=999
  selection=$(selection_fun $Numb)
  [[ -e "${SCPfrm}/${script[$selection]}" ]] && rm ${SCPfrm}/${script[$selection]} || return
}
agregar_ferramenta() {
  tput cuu1 && tput dl1
  clear
  clear
  msg -bar2
  unset Key
  echo -e "\033[1;31m$(fun_trans "PERINGATAN"): "
  echo -e "\033[1;33m$(fun_trans "Jangan masukkan kunci pembaruan di sini")"
  echo -e "\033[1;37m$(fun_trans "Masukkan Kunci untuk Sumber Daya Baru") "
  msg -bar2
  while [[ -z $Key ]]; do
    echo -ne "[Key/Link]: " && read Key
    tput cuu1 && tput dl1
  done
  echo -ne "\033[1;37m$(fun_trans "Memeriksa kunci/Link"): "
  cd ${SCPfrm}
  curl "$Key" &>/dev/null
  if [[ $? = "0" ]]; then
    echo -e "\033[1;32m $(fun_trans "Link Valid")"
    REC=$(echo $Key | awk -F"/" '{print $NF}')
    echo -ne "\033[1;33m$(fun_trans "Menerima Sumber Daya"): \033[1;31m[$REC]"
    wget -O ${SCPfrm}/${REC} $Key &>/dev/null && echo -e "\033[1;31m- \033[1;32m$(fun_trans "Diterima")" && chmod +x ${SCPfrm}/${REC} || echo -e "\033[1;31m- \033[1;31m$(fun_trans "Kesalahan saat menerima")"
  else
    wget $(ofus "$Key") >/dev/null 2>&1 && echo -e "\033[1;32m $(fun_trans "Key Valid")" || {
      msg -verm "$(fun_trans "kunci tidak sesuai")"
      msg -bar2
      return 0
    }
  fi
  IP=$(ofus "$Key" | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -o -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}')
  sleep 1s
  [[ -e ${SCPfrm}/lista-req ]] && {
    if [[ $(cat ${SCPfrm}/lista-req) = "Link INSTALASI!" ]]; then
      echo -e "\033[1;33m$(fun_trans "Link INSTALASI TIDAK HARUS DIGUNAKAN DI SINI")"
      msg -bar2
      rm ${SCPfrm}/lista-req
      return 1
    fi
    if [[ $(cat ${SCPfrm}/lista-req) = "Link tidak valid!" ]]; then
      echo -e "\033[1;33m$(fun_trans "Link TIDAK SESUAI")"
      msg -bar2
      rm ${SCPfrm}/lista-req
      return 1
    fi
    REQUEST=$(ofus "$Key" | cut -d'/' -f2)
    for arqx in $(cat ${SCPfrm}/lista-req); do
      echo -ne "\033[1;33m$(fun_trans "Menerima Sumber Daya"): \033[1;31m[$arqx] "
      wget -O ${SCPfrm}/${arqx} ${IP}:81/${REQUEST}/${arqx} >/dev/null 2>&1 && echo -e "\033[1;31m- \033[1;32m$(fun_trans "Diterima")" && chmod +x ${SCPfrm}/${arqx} || echo -e "\033[1;31m- \033[1;31m$(fun_trans "Kesalahan saat menerima")"
      sleep 1s
    done
    rm ${SCPfrm}/lista-req
    msg -bar2
  }
}
limpar_caches() {
  (
    VE="\033[1;33m" && MA="\033[1;31m" && DE="\033[1;32m"
    while [[ ! -e /tmp/abc ]]; do
      A+="#"
      echo -e "${VE}[${MA}${A}${VE}]" >&2
      sleep 0.3s
      tput cuu1 && tput dl1
    done
    echo -e "${VE}[${MA}${A}${VE}] - ${DE}[100%]" >&2
    rm /tmp/abc
  ) &
  echo 3 >/proc/sys/vm/drop_caches &>/dev/null
  sleep 1s
  sysctl -w vm.drop_caches=3 &>/dev/null
  apt-get autoclean -y &>/dev/null
  sleep 1s
  apt-get clean -y &>/dev/null
  rm /tmp/* &>/dev/null
  touch /tmp/abc
  sleep 0.5s
  msg -bar
  msg -ama "$(fun_trans "PROSES SELESAI")"
  msg -bar
}
fun_autorun() {
  if [[ -e /etc/bash.bashrc-bakup ]]; then
    mv -f /etc/bash.bashrc-bakup /etc/bash.bashrc
    cat /etc/bash.bashrc | grep -v "/etc/cr4r/menu" >/tmp/bash
    mv -f /tmp/bash /etc/bash.bashrc
    msg -ama "$(fun_trans "BERHASIL DIHAPUS")"
    msg -bar
  elif [[ -e /etc/bash.bashrc ]]; then
    cat /etc/bash.bashrc | grep -v /bin/adm >/etc/bash.bashrc.2
    echo '/etc/cr4r/menu' >>/etc/bash.bashrc.2
    cp /etc/bash.bashrc /etc/bash.bashrc-bakup
    mv -f /etc/bash.bashrc.2 /etc/bash.bashrc
    msg -ama "$(fun_trans "INISIALISASI OTOMATIS DITAMBAHKAN")"
    msg -bar
  fi
}

fun_bar() {
  comando="$1"
  _=$(
    $comando >/dev/null 2>&1
  ) &
  >/dev/null
  pid=$!
  while [[ -d /proc/$pid ]]; do
    echo -ne " \033[1;33m["
    for ((i = 0; i < 10; i++)); do
      echo -ne "\033[1;31m##"
      sleep 0.2
    done
    echo -ne "\033[1;33m]"
    sleep 1s
    echo
    tput cuu1
    tput dl1
  done
  echo -e " \033[1;33m[\033[1;31m####################\033[1;33m] - \033[1;32m100%\033[0m"
  sleep 1s
}
fun_bar2() {
  comando[0]="$1"
  comando[1]="$2"
  (
    [[ -e $HOME/fim ]] && rm $HOME/fim
    ${comando[0]} -y >/dev/null 2>&1
    ${comando[1]} -y >/dev/null 2>&1
    touch $HOME/fim
  ) >/dev/null 2>&1 &
  echo -ne "\033[1;33m ["
  while true; do
    for ((i = 0; i < 10; i++)); do
      echo -ne "\033[1;31m##"
      sleep 0.1s
    done
    [[ -e $HOME/fim ]] && rm $HOME/fim && break
    echo -e "\033[1;33m]"
    sleep 1s
    tput cuu1
    tput dl1
    echo -ne "\033[1;33m ["
  done
  echo -e "\033[1;33m]\033[1;31m -\033[1;32m 100%\033[1;37m"
}
aguarde() {
  comando[0]="$1"
  comando[1]="$2"
  (
    [[ -e $HOME/fim ]] && rm $HOME/fim
    ${comando[0]} >/dev/null 2>&1
    ${comando[1]} >/dev/null 2>&1
    touch $HOME/fim
  ) >/dev/null 2>&1 &
  tput civis
  echo -ne "  \033[1;33mMemgang \033[1;37m- \033[1;33m["
  while true; do
    for ((i = 0; i < 18; i++)); do
      echo -ne "\033[1;31m#"
      sleep 0.1s
    done
    [[ -e $HOME/fim ]] && rm $HOME/fim && break
    echo -e "\033[1;33m]"
    sleep 1s
    tput cuu1
    tput dl1
    echo -ne "  \033[1;33mMemegang \033[1;37m- \033[1;33m["
  done
  echo -e "\033[1;33m]\033[1;37m -\033[1;32m OK !\033[1;37m"
  tput cnorm
}
meu_ip() {
  if [[ -e /etc/ipcr4r ]]; then
    echo "$(cat /etc/ipcr4r)"
  else
    MEU_IP=$(ip addr | grep 'inet' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -o -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | head -1)
    MEU_IP2=$(wget -qO- ipv4.icanhazip.com)
    [[ "$MEU_IP" != "$MEU_IP2" ]] && echo "$MEU_IP2" || echo "$MEU_IP"
    echo "$MEU_IP2" >/etc/ipcr4r
  fi
}
fun_ip() {
  if [[ -e /etc/ipcr4r ]]; then
    IP="$(cat /etc/ipcr4r)"
  else
    MEU_IP=$(ip addr | grep 'inet' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -o -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | head -1)
    MEU_IP2=$(wget -qO- ipv4.icanhazip.com)
    [[ "$MEU_IP" != "$MEU_IP2" ]] && IP="$MEU_IP2" || IP="$MEU_IP"
    echo "$MEU_IP2" >/etc/ipcr4r
  fi
}
fun_eth() {
  eth=$(ifconfig | grep -v inet6 | grep -v lo | grep -v 127.0.0.1 | grep "encap:Ethernet" | awk '{print $1}')
  [[ $eth != "" ]] && {
    msg -bar
    msg -ama " $(fun_trans "Terapkan Sistem untuk Meningkatkan Paket Ssh?")"
    msg -ama " $(fun_trans "Opsi untuk Pengguna Tingkat Lanjut")"
    msg -bar
    read -p " [S/N]: " -e -i n sshsn
    tput cuu1 && tput dl1
    [[ "$sshsn" = @(s|S|y|Y) ]] && {
      echo -e "${cor[1]} $(fun_trans "Memperbaiki masalah paket di SSH...")"
      echo -e " $(fun_trans "Berapa RX?")"
      echo -ne "[ 1 - 999999999 ]: "
      read rx
      [[ "$rx" = "" ]] && rx="999999999"
      echo -e " $(fun_trans "Berapa TX")"
      echo -ne "[ 1 - 999999999 ]: "
      read tx
      [[ "$tx" = "" ]] && tx="999999999"
      apt-get install ethtool -y >/dev/null 2>&1
      ethtool -G $eth rx $rx tx $tx >/dev/null 2>&1
      msg -bar
    }
  }
}
os_system() {
  system=$(echo $(cat -n /etc/issue | grep 1 | cut -d' ' -f6,7,8 | sed 's/1//' | sed 's/      //'))
  echo $system | awk '{print $1, $2}'
}

hapusTools() {
  if [[ "$1" == "stunnel4" ]]; then
    msg -ama "Menghentikan stunnel4"
    service stunnel4 stop &>/dev/null
    service stunnel4 disable &>/dev/null
    msg -ama "Menghapus stunnel4"
    fun_bar "apt-get --purge remove stunnel4 -y"
    msg -bar
    rm -rf /etc/stunnel/stunnel.conf >/dev/null 2>&1
    rm -rf /etc/stunnel >/dev/null 2>&1
    msg -ama " $(fun_trans "Berhasil dihapus!")"
  elif [[ "$1" == "shadowsocks" ]]; then
    msg -ama " $(fun_trans "Menghentikan SHADOWSOCKS")"
    [[ $(ps x | grep ssserver | grep -v grep | awk '{print $1}') != "" ]] && kill -9 $(ps x | grep ssserver | grep -v grep | awk '{print $1}') >/dev/null 2>&1 && ssserver -c /etc/shadowsocks.json -d stop >/dev/null 2>&1
    msg -bar
    msg -ama " $(fun_trans "Menghapus shadowsocks!")"
    rm -rf /etc/shadowsocks* &>/dev/null
    pip3 uninstall shadowsocks &>/dev/null
  elif [[ "$1" == "dropbear" ]]; then
    echo -e "\033[1;32m $(fun_trans "Menghapus Dropbear*")"
    msg -bar
    service dropbear disable &>/dev/null
    service dropbear stop &>/dev/null
    fun_bar "apt-get remove dropbear -y"
    msg -bar
    [[ -e /etc/default/dropbear ]] && rm -rf /etc/default/dropbear* &>/dev/null
  elif [[ "$1" == "apache" ]]; then
    msg -ama " $(fun_trans "Hapus Apache2")"
    msg -bar
    /etc/init.d/apache2 stop >/dev/null 2>&1
    fun_bar "sleep 3s"
    apt-get --purge remove apache2 -y &>/dev/null
    msg -bar
    msg -ama " $(fun_trans "Apache2 sudah dihapus!")"
    [[ -d /etc/apache2 ]] && rm -rf /etc/apache2
    msg -bar
  else
    msg -ama "Tidak ada yang dihapus"
  fi
}

remove_script() {
  clear
  clear
  msg -bar2
  msg -ama "$(fun_trans "Apakah anda yakin ingin menghapus semua skrip yang terpasang")?"
  msg -bar
  while [[ ${yesno} != @(s|S|y|Y|n|N) ]]; do
    read -p "[S/N]: " yesno
    tput cuu1 && tput dl1
  done
  if [[ ${yesno} = @(s|S|y|Y) ]]; then
    rm -rf ${SCPdir} &>/dev/null
    rm -rf ${SCPusr} &>/dev/null
    rm -rf ${SCPfrm} &>/dev/null
    rm -rf ${SCPinst} &>/dev/null
    [[ -e /bin/adm ]] && rm /bin/adm
    [[ -e /usr/bin/adm ]] && rm /usr/bin/adm
    [[ -e /bin/menu ]] && rm /bin/menu
    [[ -e /usr/bin/menu ]] && rm /usr/bin/menu
    [[ -e /bin/h ]] && rm /bin/h
    [[ -e /bin/trans ]] && rm /bin/trans
    [[ -e /usr/bin/trans ]] && rm /usr/bin/trans
    [[ -e /bin/speedtest ]] && rm /bin/speedtest
    [[ -e /bin/payloads ]] && rm /bin/payloads
    [[ -e /bin/nettools.py ]] && rm /bin/nettools.py
    [[ -e $HOME/versao ]] && rm $HOME/versao

    hapusTools stunnel4
    hapusTools shadowsocks

    cd $HOME
    msg -ama "$(fun_trans "MENGHAPUS SKRIP SELESAI")?"
    msg -bar
    exit
  fi
}
# Menu Ferramentas
systen_info() {
  clear
  clear
  msg -bar2
  msg -ama "$(fun_trans "DETIAIL SISTEM")"
  msg -bar
  null="\033[1;31m"
  if [ ! /proc/cpuinfo ]; then
    msg -verm "$(fun_trans "Sistem Tidak Didukung")" && msg -bar
    return 1
  fi
  if [ ! /etc/issue.net ]; then
    msg -verm "$(fun_trans "Sistem Tidak Didukung")" && msg -bar
    return 1
  fi
  if [ ! /proc/meminfo ]; then
    msg -verm "$(fun_trans "Sistem Tidak Didukung")" && msg -bar
    return 1
  fi
  totalram=$(free | grep Mem | awk '{print $2}')
  usedram=$(free | grep Mem | awk '{print $3}')
  freeram=$(free | grep Mem | awk '{print $4}')
  swapram=$(cat /proc/meminfo | grep SwapTotal | awk '{print $2}')
  system=$(cat /etc/issue.net)
  clock=$(lscpu | grep "CPU MHz" | awk '{print $3}')
  based=$(cat /etc/*release | grep ID_LIKE | awk -F "=" '{print $2}')
  processor=$(cat /proc/cpuinfo | grep "model name" | uniq | awk -F ":" '{print $2}')
  cpus=$(cat /proc/cpuinfo | grep processor | wc -l)
  # Sistem OPERACIONAL
  echo -e "\033[1;32mSISTEM OPERASIONAL \033[0m"
  msg -ama "$(fun_trans "Nama VPS"): ${null}$(hostname)"
  [[ "$system" ]] && msg -ama "$(fun_trans "Sistem"): ${null}$system" || msg -ama "$(fun_trans "Sistem"): ${null}???"
  msg -ama "$(fun_trans "IP"): ${null}$(ip addr | grep inet | grep -v inet6 | grep -v "host lo" | awk '{print $2}' | awk -F "/" '{print $1}')"
  msg -ama "$(fun_trans "Versi Kernel"): ${null}$(uname -r)"
  [[ "$based" ]] && msg -ama "$(fun_trans "Berdasarkan"): ${null}$based" || msg -ama "$(fun_trans "Berdasarkan"): ${null}???"
  # PROCESSADOR
  echo ""
  echo -e "\033[1;32mPROSESSOR \033[0m"
  [[ "$processor" ]] && msg -ama "$(fun_trans "Prosessor"): ${null}$processor x$cpus" || msg -ama "$(fun_trans "Prosessor"): ${null}???"
  [[ "$clock" ]] && msg -ama "$(fun_trans "Freq"): ${null}$clock MHz" || msg -ama "$(fun_trans "Freq"): ${null}???"
  msg -ama "$(fun_trans "Arc"): ${null}$(uname -m)"
  # MEMORIA RAM
  echo ""
  echo -e "\033[1;32mRAM \033[0m"
  msg -ama "$(fun_trans "Penggunaan Prosesor"): ${null}$(ps aux | awk 'BEGIN { sum = 0 }  { sum += sprintf("%f",$3) }; END { printf " " "%.2f" "%%", sum}')"
  msg -ama "$(fun_trans "Total RAM"): ${null}$(($totalram / 1024))"
  msg -ama "$(fun_trans "RAM Sedang Digunakan"): ${null}$(($usedram / 1024))"
  msg -ama "$(fun_trans "RAM Free"): ${null}$(($freeram / 1024))"
  msg -ama "$(fun_trans "SWAP"): ${null}$(($swapram / 1024))MB"
  # TEMPO ONLINE
  echo ""
  echo -e "\033[1;32mWAKTU ONLINE \033[0m"
  msg -ama "$(fun_trans "WAKTU ONLINE"): ${null}$(uptime)"
  msg -bar
  return 0
}
float_data() {
  ofc="\033[0m${gren}(#OFC)"
  dev="\033[0m${gren}(#DEV)"
  bet="\033[0m${gren}(#BET)"
  case $1 in
  # Menu Instala��o Ger-Frm OFC
  "MasterBin.sh") echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "Buat BIN*") $ofc" ;;
  "payySND.sh") echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "Buat Payload (Python)*") $ofc" ;;
    # Menu Instala��o Ger-Frm
  "ADMbot.sh") echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "BOT MANAJEMEN*") TELEGRAM $ofc" ;;
  "apacheon.sh") echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "BAGIKAN FILE ONLINE*") $ofc" ;;
  "ports.sh") echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "MANAJEMEN PORT*") $ofc" ;;
  "speed.sh") echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "TES KECEPATAN*") $ofc" ;;
  "utils.sh") echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "(Tcpspeed/torrent) $ofc" ;;
  "ultrahost") echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "SCAN SUBDOMAIN*") $dev" ;;
  "criar_pay.sh") echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "GENERATE DARI*") PAYLOAD $dev" ;;
  "optimizar.sh") echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "OPTIMALKAN Sistem*") $dev" ;;
  "fai2ban.sh") echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "Proteksi FAIL2BAN*") $dev" ;;
  "paysnd.sh") echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "PAYLOAD $(fun_trans "Bruto Force*") $dev" ;;
    # Menu Instala��o inst
  "apache2.sh") echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "APACHE2 $(pid_inst apache2)" ;;
  "openssh.sh") echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "OPENSSH $(pid_inst sshd)" ;;
  "squid.sh") echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "SQUID $(pid_inst squid)" ;;
  "dropbear.sh") echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "DROPBEAR $(pid_inst dropbear)" ;;
  "openvpn.sh") echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "OPENVPN $(pid_inst openvpn)" ;;
  "ssl.sh") echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "SSL $(pid_inst stunnel4)" ;;
  "sslh.sh") echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "SSLH MULTIPLEX $(pid_inst sslh)" ;;
  "shadowsocks.sh") echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "SHADOWSOCKS $(pid_inst ssserver)" ;;
  "sockspy.sh") echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "SOCKS PYTHON $(pid_inst python)" ;;
  "v2ray.sh") echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "V2RAY $(pid_inst v2ray)" ;;
  "budp.sh") echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "BADVPN $(pid_inst badvpn)" ;;
  "vnc.sh") echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "VNC SERVER $(pid_inst vnc)" ;;
  "webmin.sh") echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "WEBMIN $(pid_inst miniserv.)" ;;
  "PDirect.py") return 1 ;;
  "PGet.py") return 1 ;;
  "POpen.py") return 1 ;;
  "PPriv.py") return 1 ;;
  "PPub.py") return 1 ;;
  "speedtest.py") return 1 ;;
  "pwd.pwd") return 1 ;;
  "gestor.sh") return 1 ;;
  "scriptsalternos.sh") return 1 ;;
  *) echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "${1^^} \033[1;33m($(fun_trans "Tanpa deskripsi")!)" ;;
  esac
}
alat_tool() {
  tput cuu1 && tput dl1
  clear
  clear
  msg -bar2
  msg -ama "$(fun_trans "MENU ALAT*")"
  msg -bar2
  echo -ne "$(msg -verd "[0]") $(msg -verm2 ">") " && msg -bra "$(fun_trans "Kembali")"
  script[0]="kembali"
  local Numb=1
  for arqs in $(ls ${SCPfrm}); do
    float_data "$arqs" "$Numb" && {
      script[$Numb]="$arqs"
      let Numb++
    }
  done
  echo -ne "$(msg -verd "[$Numb]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "RINCIAN SISTEM*") $ofc"
  script[$Numb]="systeminf"
  let Numb++
  echo -ne "$(msg -verd "[$Numb]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "HAPUS SISTEM CACHE*") $ofc"
  script[$Numb]="limpar"
  let Numb++
  echo -ne "$(msg -verd "[$Numb]") $(msg -verm2 ">") \033[1;33m[!]" && echo -e "\033[1;32m" "$(fun_trans "TAMBAHKAN ALAT*")"
  script[$Numb]="agregar"
  let Numb++
  echo -ne "$(msg -verd "[$Numb]") $(msg -verm2 ">") \033[1;33m[!]" && echo -e "\033[1;31m" "$(fun_trans "HAPUS ALAT*")"
  script[$Numb]="remove"
  msg -bar2
  selection=$(selection_fun $Numb)
  [[ -e "${SCPfrm}/${script[$selection]}" ]] && {
    ${SCPfrm}/${script[$selection]} ${id}
  } || {
    case ${script[$selection]} in
    "agregar") agregar_ferramenta ;;
    "remove") remove_ferramenta ;;
    "limpar") limpar_caches ;;
    "systeminf") systen_info ;;
    *) return 0 ;;
    esac
  }
}
# Menu Info
menu_info() {
  if [[ "$(grep -c "Ubuntu" /etc/issue.net)" = "1" ]]; then
    system=$(cut -d' ' -f1 /etc/issue.net)
    system+=$(echo ' ')
    system+=$(cut -d' ' -f2 /etc/issue.net | awk -F "." '{print $1}')
  elif [[ "$(grep -c "Debian" /etc/issue.net)" = "1" ]]; then
    system=$(cut -d' ' -f1 /etc/issue.net)
    system+=$(echo ' ')
    system+=$(cut -d' ' -f3 /etc/issue.net)
  else
    system=$(cut -d' ' -f1 /etc/issue.net)
  fi
  _ram=$(printf '%-10s' "$(free -h | grep -i mem | awk {'print $2'})")
  _usor=$(printf '%-8s' "$(free -m | awk 'NR==2{printf "%.2f%%", $3*100/$2 }')")
  _usop=$(printf '%-1s' "$(top -bn1 | awk '/Cpu/ { cpu = "" 100 - $8 "%" }; END { print cpu }')")
  _core=$(printf '%-8s' "$(grep -c cpu[0-9] /proc/stat)")
  modelo1=$(printf '%-11s' "$(lscpu | grep Arch | sed 's/\s\+/,/g' | cut -d , -f2)")
  mb=$(printf '%-8s' "$(free -h | grep Mem | sed 's/\s\+/,/g' | cut -d , -f6)")
  _system=$(printf '%-13s' "$system")
  _hora=$(printf '%(%H:%M:%S)T')
  _hoje=$(date +'%d/%m/%Y')
  echo -e "\033[1;32mOS\033[1;37m/\033[1;32mDATA\033[1;37m/\033[1;32mJAM      RAM      Sistem\033[1;37m/\033[1;32mCPU "
  echo -e "\033[1;31mOS\033[1;32m: \033[1;37m$_system \033[1;31mTOTAL\033[1;32m: \033[1;37m$_ram\033[1;31mCORE\033[1;32m:\033[1;37m $_core "
  echo -e "\033[1;31mDIA\033[1;32m: \033[1;37m$_hoje \033[1;31m  CACHE\033[1;32m: \033[1;37m$mb\033[1;31m  BASE\033[1;32m:\033[1;37m $modelo1"
  echo -e "\033[1;31mHORA\033[1;32m: \033[1;37m$_hora  \033[1;31m  DIGUNAKAN\033[1;32m: \033[1;37m$_usor\033[1;31m PENGGUNAAN CPU\033[1;32m: \033[1;37m$_usop"
}
# Menu Instala��o
pid_inst() {
  [[ $1 = "" ]] && echo -e "\033[1;31moff" && return 0
  unset port
  port_var=$(lsof -V -i -P -n | grep -v "ESTABLISHED" | grep -v "COMMAND")
  i=0
  while read port; do
    var1=$(echo $port | awk '{print $1}') && var2=$(echo $port | awk '{print $9}' | awk -F ":" '{print $2}')
    [[ "$(echo -e ${port[@]} | grep "$var1 $var2")" ]] || {
      port[$i]="$var1 $var2\n"
      let i++
    }
  done <<<"$port_var"
  [[ $(echo "${port[@]}" | grep "$1") ]] && echo -e "\033[1;32mOn" || echo -e "\033[1;31moff"
}

menu_inst() {
  export -f fun_eth
  export -f fun_bar
  menuTXT="$(fun_trans "Kembali*")"
  clear
  clear
  msg -bar2
  msg -ama "$(fun_trans "MENU INSTALASI*")"
  msg -bar
  msg -ama "$(fun_trans "Port yang Saat Ini Aktif!")"
  msg -bar
  mine_port2
  msg -bar
  echo -ne "$(msg -verd "[0]") $(msg -verm2 ">") " && msg -bra "$menuTXT"
  local Numb=1
  for arqs in $(ls ${SCPinst}); do
    float_data "$arqs" "$Numb" && {
      script[$Numb]="$arqs"
      let Numb++
    }
  done
  msg -bar
  script[0]="kembali"
  selection=999
  selection=$(selection_fun $Numb)
  [[ -e "${SCPinst}/${script[$selection]}" ]] && {
    ${SCPinst}/${script[$selection]} ${id}
  } || return 0
}

# MENU FLUTUANTE
menu_func() {
  local options=${#@}
  local array
  for ((num = 1; num <= $options; num++)); do
    echo -ne "$(msg -verd "[$num]") $(msg -verm2 ">") "
    array=(${!num})
    case ${array[0]} in
    "-vd") msg -verd "\033[1;33m[!]\033[1;32m $(fun_trans "${array[@]:1}")" | sed ':a;N;$!ba;s/\n/ /g' ;;
    "-vm") msg -verm2 "\033[1;33m[!]\033[1;31m $(fun_trans "${array[@]:1}")" | sed ':a;N;$!ba;s/\n/ /g' ;;
    "-fi") msg -azu "$(fun_trans "${array[@]:2}") ${array[1]}" | sed ':a;N;$!ba;s/\n/ /g' ;;
    *) msg -azu "$(fun_trans "${array[@]}")" | sed ':a;N;$!ba;s/\n/ /g' ;;
    esac
  done
}
# Sistem DE SELECAO
selection_fun() {
  local selection="null"
  local range
  for ((i = 0; i <= $1; i++)); do range[$i]="$i "; done
  while [[ ! $(echo ${range[*]} | grep -w "$selection") ]]; do
    echo -ne "\033[1;37m$(fun_trans "Pilih opsi"): " >&2
    read selection
    tput cuu1 >&2 && tput dl1 >&2
  done
  echo $selection
}
# EXECU��O MENU
export -f msg
export -f selection_fun
export -f fun_trans
export -f menu_func
export -f meu_ip
export -f fun_ip
export -f pid_inst
export -f fun_bar
export -f hapusTools
export -f mportas
export -f mine_port
export -f SCPdir
export -f SCPusr
export -f SCPfrm
export -f SCPinst
export -f SCPbahasa
clear
msg -bar
# INFORMACOES DO SERVIDOR
msg -ama "${vesaoSCT}"
msg -bar
menu_info
msg -bar
# msg -ne "$(fun_trans "Sistem*"): " && echo -ne "\033[1;37m$(os_system)  "
# msg -ne "$(fun_trans "IP*"): " && echo -e "\033[1;37m$(meu_ip)"
[[ -e ${SCPdir}/USRonlines ]] && msg -bar && msg -ne "$(fun_trans "ONLINE*"): " && echo -ne "\033[1;37m$(cat ${SCPdir}/USRonlines) $(fun_trans "pengguna")  "
[[ -e ${SCPdir}/USRexpired ]] && msg -ne "$(fun_trans "EXPIRED*"): " && echo -e "\033[1;37m$(cat ${SCPdir}/USRexpired) $(fun_trans "pengguna")  $log"
# [[ -e ${SCPdir}/message.txt ]] && msg -bar && msg -bra "MESSAGE: $(cat ${SCPdir}/message.txt)"
# [[ -e ${SCPdir}/key.txt ]] && msg -bar && msg -bra "USER-KEY: $(cat ${SCPdir}/key.txt)"
# NOVO Sistem DE MENUS
msg -bar
msg -ama "\033[1;31m[\033[1;32m VPN-SSH \033[1;31m] \033[1;31mIP \033[1;37m$(meu_ip) \033[1;31mpengguna: \033[1;37m$_total"
msg -bar
echo -ne "$(msg -verd "[0]") $(msg -verm2 ">") " && msg -bra "$(fun_trans "EXIT*")"
## Hapus pagar jika sudah dev
# menu_func "MANAGE USERS*" "MANAGE TOOLS*" "MANAGE SYSTEM*" "-vd UPDATE SCRIPT*" "-vm UNINSTALL VPN-SSH*" "CHANGE COLOR SYSTEM*" "CHANGE SCRIPT LANGUAGE*" "-fi $AutoRun AUTORUN*" "INSTALLATION MENU"
msg -bar
# FIM
menu_inst

# selection=$(selection_fun 9)
# case ${selection} in
# 0) cd $HOME && exit 0 ;;
# 1) ${SCPusr}/usercodes "${bahasa}" ;;
# 2) alat_tool ;;
# 3) ${SCPfrm}/gestor.sh "${bahasa}" ;;
# 4) atualiza_fun ;;
# 5) remove_script ;;
# 6) canbio_color ;;
# 7) funcao_bahasa ;;
# 8) fun_autorun ;;
# 9) menu_inst ;;
# esac
msg -ne "$(fun_trans "Enter untuk melanjutkan")" && read enter
${SCPdir}/menu
